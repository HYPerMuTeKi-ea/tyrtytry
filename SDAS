import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# === 1. 自由振荡分析 ===
T_values = np.array([17.25, 17.51, 17.81, 17.72, 16.44])
T_avg = np.mean(T_values)  # 平均周期
omega_0 = 2 * np.pi / T_avg  # 自然角频率
print(f"Natural Frequency ω_0 = {omega_0:.4f} rad/s")

# === 2. 共振曲线分析 ===
driving_freq = np.array([0.10, 0.11, 0.18, 0.21, 0.24, 0.26, 0.27, 0.33, 0.38])
driving_omega = 2 * np.pi * driving_freq  # 转换为角频率
amplitude = np.array([0.60, 0.60, 1.21, 1.57, 1.67, 2.00, 1.99, 0.49, 0.36])

def lorentzian(omega, A_0, omega_lambda, gamma):
    return A_0 / np.sqrt((omega**2 - omega_lambda**2)**2 + (gamma * omega)**2)

params, _ = curve_fit(lorentzian, driving_omega, amplitude, p0=[2, omega_0, 0.1])
A_0_fit, omega_lambda_fit, gamma_fit = params
print(f"Resonance Frequency ω_λ = {omega_lambda_fit:.4f} rad/s")
print(f"Damping Parameter γ = {gamma_fit:.4f}")

omega_fit = np.linspace(min(driving_omega), max(driving_omega), 500)
plt.figure(figsize=(8, 6))
plt.scatter(driving_omega, amplitude, color='blue', label='Experimental Data')
plt.plot(omega_fit, lorentzian(omega_fit, *params), color='red', label='Fitted Lorentzian')
plt.xlabel("Angular Frequency ω (rad/s)")
plt.ylabel("Amplitude (rad)")
plt.title("Resonance Curve")
plt.legend()
plt.grid()
plt.show()

Q_factor = omega_lambda_fit / gamma_fit
print(f"Quality Factor Q = {Q_factor:.4f}")

# === 3. 相位角分析 ===
AB_values = np.array([0.30, 0.35, 0.50, 0.65, 0.72, 0.83, 0.80, 0.21, 0.15])
phi_values = np.arcsin(AB_values / amplitude)

plt.figure(figsize=(8, 6))
plt.scatter(driving_omega, phi_values, color='green', label='Phase Data')
plt.xlabel("Angular Frequency ω (rad/s)")
plt.ylabel("Phase φ (rad)")
plt.title("Phase vs Angular Frequency")
plt.legend()
plt.grid()
plt.show()

# === 4. 阻尼分析 ===
output_level = np.array([0, 1, 2, 3, 4, 5])  # 驱动力（output level）
damping_amplitude_1 = np.array([0.33, 0.43, 0.47, 0.51, 0.47, 0.50])  # 第一组数据
damping_amplitude_2 = np.array([0.33, 0.41, 0.43, 0.51, 0.47, 0.50])  # 第二组数据

# 线性拟合模型
def linear_fit(output, A0, k):
    return A0 + k * output

# 二次多项式拟合模型
def quadratic_fit(output, A0, k1, k2):
    return A0 + k1 * output + k2 * output**2

# 第一组线性拟合
params_linear_1, _ = curve_fit(linear_fit, output_level, damping_amplitude_1, p0=[0.5, 0.1])
A0_linear_1, k_linear_1 = params_linear_1

# 第二组线性拟合
params_linear_2, _ = curve_fit(linear_fit, output_level, damping_amplitude_2, p0=[0.5, 0.1])
A0_linear_2, k_linear_2 = params_linear_2

# 第一组二次拟合
params_quad_1, _ = curve_fit(quadratic_fit, output_level, damping_amplitude_1, p0=[0.5, 0.1, 0.01])

# 第二组二次拟合
params_quad_2, _ = curve_fit(quadratic_fit, output_level, damping_amplitude_2, p0=[0.5, 0.1, 0.01])

# 绘制拟合结果
output_fit = np.linspace(min(output_level), max(output_level), 500)
plt.figure(figsize=(8, 6))
plt.scatter(output_level, damping_amplitude_1, color='blue', label='Data (0.5cm)')

plt.plot(output_fit, quadratic_fit(output_fit, *params_quad_1), color='cyan', linestyle='--', label='Quadratic Fit (0.5cm)')
plt.scatter(output_level, damping_amplitude_2, color='green', label='Data (2.5cm)')

plt.plot(output_fit, quadratic_fit(output_fit, *params_quad_2), color='magenta', linestyle='--', label='Quadratic Fit (2.5cm)')
plt.xlabel("Output Level (Driving Force)")
plt.ylabel("Amplitude (rad)")
plt.title("Damped Amplitude vs Driving Force")
plt.legend()
plt.grid()
plt.show()

# 输出拟合结果
print(f"Linear Fit (0.5cm): A0 = {A0_linear_1:.4f}, k = {k_linear_1:.4f}")
print(f"Linear Fit (2.5cm): A0 = {A0_linear_2:.4f}, k = {k_linear_2:.4f}")
