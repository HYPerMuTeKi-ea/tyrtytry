import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

### 1. 计算自由振荡的自然频率 ###
T_values = np.array([17.25, 17.51, 17.81, 17.72, 16.44])  # 记录的周期数据
T_avg = np.mean(T_values)  # 计算平均周期
omega_0 = 2 * np.pi / T_avg  # 计算自然角频率
print(f"NATRUAL FREQ ω_0 = {omega_0:.4f} rad/s")

### 2. 计算共振频率数据 ###
# 记录的驱动频率 (Hz) 和振幅 (rad)
f_values = np.array([0.10, 0.11, 0.18, 0.21, 0.24, 0.26, 0.27, 0.33, 0.38])
A_values = np.array([0.60, 0.60, 1.21, 1.57, 1.67, 2.00, 1.99, 0.49, 0.36])

# 转换为角频率 ω = 2πf
omega_values = 2 * np.pi * f_values

# 计算振幅 θ0
l = 1.0  # 假设激光镜到绘图桌距离 l = 1.0 m
theta_0_values = A_values / (2 * l)

# 计算相位角 φ
AB_values = np.array([0.30, 0.35, 0.50, 0.65, 0.72, 0.83, 0.80, 0.21, 0.15])  # 记录的短轴数据
phi_values = np.arcsin(AB_values / A_values)  # 计算相位角（单位：弧度）

# 绘制振幅-角频率曲线
plt.figure(figsize=(8, 5))
plt.scatter(omega_values, theta_0_values, label="DATA", color="blue")
plt.xlabel("ANGULAR FREQ ω (rad/s)")
plt.ylabel("AMP θ_0 (rad)")
plt.title("RESONANCE CURVE")
plt.legend()
plt.grid()
plt.show()

# 绘制相位角-角频率曲线
plt.figure(figsize=(8, 5))
plt.scatter(omega_values, phi_values, label="DATA", color="green")
plt.xlabel("ANGULAR FREQUENCY ω (rad/s)")
plt.ylabel("PHASE SHIFT φ (rad)")
plt.title("PHASE SHIFT vs. ANGULAR FREQUENCY")
plt.legend()
plt.grid()
plt.show()

### 3. 共振频率拟合 ###
# 定义洛伦兹函数进行拟合
def lorentzian(omega, A_0, omega_lambda, gamma):
    return A_0 / np.sqrt((omega**2 - omega_lambda**2)**2 + (gamma * omega)**2)

# 拟合数据
params, _ = curve_fit(lorentzian, omega_values, theta_0_values, p0=[2, omega_0, 0.1])
A_0_fit, omega_lambda_fit, gamma_fit = params

print(f" ω_λ = {omega_lambda_fit:.4f} rad/s")
print(f" γ = {gamma_fit:.4f}")

# 绘制拟合曲线
omega_fit = np.linspace(min(omega_values), max(omega_values), 100)
plt.figure(figsize=(8, 5))
plt.scatter(omega_values, theta_0_values, label="实验数据", color="blue")
plt.plot(omega_fit, lorentzian(omega_fit, *params), label="拟合曲线", color="red")
plt.xlabel("AF ω (rad/s)")
plt.ylabel("A θ_0 (rad)")
plt.title("damping 0.5cm")
plt.legend()
plt.grid()
plt.show()

output_level = np.array([0, 1, 2, 3, 4, 5])  # 假设输出等级为时间点
amplitude_damped = np.array([0.33, 0.43, 0.47, 0.51, 0.47, 0.50])  # 你的实验数据

# 指数衰减函数
def damped_exp(t, A0, tau):
    return A0 * np.exp(-t / tau)

# 进行拟合
popt_damped, _ = curve_fit(damped_exp, output_level, amplitude_damped, p0=[0.5, 2])

# 绘制阻尼振荡曲线
plt.figure(figsize=(8, 6))
plt.scatter(output_level, amplitude_damped, label="DATA", color="red")
time_fit = np.linspace(0, 5, 100)
plt.plot(time_fit, damped_exp(time_fit, *popt_damped), label="fitting line", color="blue")
plt.xlabel("output level")
plt.ylabel("A (rad)")
plt.title("DAMPING 2.5cm")
plt.legend()
plt.show()

# 输出拟合结果
print(f"INITIAL AMP A0 = {popt_damped[0]:.3f}, DAMPING TIME PARAMETER tau = {popt_damped[1]:.3f} s")

### 4. 计算品质因子 Q ###
# 找到振幅最大值及其对应的角频率
max_index = np.argmax(theta_0_values)
omega_max = omega_values[max_index]

# 计算共振峰半宽度 δω
half_max = theta_0_values[max_index] / np.sqrt(2)
omega_half_range = omega_values[np.abs(theta_0_values - half_max).argmin()]
delta_omega = np.abs(omega_max - omega_half_range)

# 计算品质因子 Q
Q_factor = omega_lambda_fit / delta_omega
print(f"Q = {Q_factor:.4f}")

### 5. 阻尼指数衰减拟合 ###
# 记录的时间 (s) 和振幅
t_values = np.array([0, 1, 2, 3, 4, 5])  # 假设的时间序列
A_damped = np.array([0.69, 1.34, 1.95, 2.67, 3.41, 4.16])  # 记录的振幅数据

# 定义指数衰减函数
def exp_decay(t, A_0, beta):
    return A_0 * np.exp(-beta * t)

# 拟合数据
params, _ = curve_fit(exp_decay, t_values, A_damped, p0=[4, 0.1])
A_0_fit, beta_fit = params

print(f"FITITNG DAMPING PARAMETERS β = {beta_fit:.4f}")

# 绘制阻尼曲线
plt.figure(figsize=(8, 5))
plt.scatter(t_values, A_damped, label="DATA", color='blue')
t_fit = np.linspace(0, max(t_values), 100)
plt.plot(t_fit, exp_decay(t_fit, *params), label="FITTING", color='red')
plt.xlabel("t (s)")
plt.ylabel(" A (rad)")
plt.title("DAMPING RESONANCE FITTING")
plt.legend()
plt.grid()
plt.show()
